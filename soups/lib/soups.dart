/*Task 3

–ó–∞–≤–¥–∞–Ω–Ω—è: –°—É–ø –¥–Ω—è –ø—Ä–µ–º—ñ—É–º
–£–º–æ–≤–∞:

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
ùëõ
n (–Ω–µ –±—ñ–ª—å—à–µ 30), –ø—Ä–æ—Ç—è–≥–æ–º —è–∫–∏—Ö –≤—ñ–Ω –∑–∞–ø–∏—Å—É—î —Å–≤—ñ–π –≤–∏–±—ñ—Ä ¬´—Å—É–ø—É –¥–Ω—è¬ª. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 1 –¥–æ 30. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤, –ø—Ä–æ–≥—Ä–∞–º–∞ –º–∞—î –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –π–æ–≥–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.

–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 7 (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª), —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–µ–≤–Ω–æ–º—É —Å—É–ø—É:

1 - ¬´–ë–æ—Ä—â¬ª
2 - ¬´–°–æ–ª—è–Ω–∫–∞¬ª
3 - ¬´–†–æ–∑—Å–æ–ª—å–Ω–∏–∫¬ª
4 - ¬´–ì—Ä–∏–±–Ω–∏–π —Å—É–ø¬ª
5 - ¬´–¢–æ–º –Ø–º¬ª
6 - ¬´–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω¬ª
7 - ¬´–°—É–ø-–ø—é—Ä–µ –∑ –≥–∞—Ä–±—É–∑–∞¬ª

–ü—Ä–∏–∫–ª–∞–¥: ¬´1 3¬ª - –æ–∑–Ω–∞—á–∞—î, —â–æ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –±—É–ª–æ –æ–±—Ä–∞–Ω–æ ‚Äú–ë–æ—Ä—â‚Äù —ñ ‚Äú–†–æ–∑—Å–æ–ª—å–Ω–∏–∫‚Äù.

–ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞:

- –í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—É–ø—ñ–≤, –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è.

- –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –±—É–≤ –æ–±—Ä–∞–Ω–∏–π –∫–æ–∂–µ–Ω —Å—É–ø –∑–∞ –≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥.

- –ü–æ–∫–∞–∑–∞—Ç–∏, —è–∫–∏–π —Å—É–ø –±—É–≤ –æ–±—Ä–∞–Ω–∏–π –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ.

- –¢—Ä–µ–±–∞ –ø—Ä–æ—Ä–µ–∫–ª–∞–º—É–≤–∞—Ç–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –æ–±—Ä–∞–Ω–∏–π —Å—É–ø

- –¢—Ä–µ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å—ñ–≤ –º–µ–Ω—é –Ω–∞ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Ç–∏–∂–Ω—è, –¥–µ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –Ω–∞–π–±—ñ–ª—å—à –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—É–ø–∏.

- –î–∞–ª—ñ —Ç—Ä–µ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤, –≤–æ–Ω–∏ –ª—é–±–ª—è—Ç—å –∞–±–æ –æ–¥–∏–Ω –∞–±–æ —ñ–Ω—à–∏–π —Å—É–ø —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫, —â–æ–± —Ü—ñ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å —Ç–∞ –±—Ä–∞–ª–∏ —Å—É–ø –∑ –º–µ–Ω—é —Ç–∞ —Å—Ç–∞–≤–∏–ª–∏ –æ—Ü—ñ–Ω–∫—É –∑–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è. –≤—ñ–¥ 1 –¥–æ 10 –Ω–∞ —Ä–∞–Ω–¥–æ–º, –∞–ª–µ —è–∫—â–æ —î —É–ª—é–±–ª–µ–Ω–∏–π —Å—É–ø, —Ç–æ –æ—Ü—ñ–Ω–∫–∞ –∑–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6.

–û–û–ü –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö, –∞–ª–µ –æ–± º—î–∫—Ç–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞

–ü—Ä–∏–∫–ª–∞–¥

*–æ–±—Ä–∞–ª–∏ —Å—É–ø–∏ –¥–Ω—è*
*–ø—ñ–¥–±–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É*
–ù–∞—à–µ –º–µ–Ω—é —Å—É–ø—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –∑–≥—ñ–¥–Ω–æ –∑ —É–ø–æ–¥–æ–±–∞–Ω—å –≥—É—Ä–º–∞–Ω–∞:
–ø–Ω - –ë–æ—Ä—â
–≤—Ç - –ì—Ä–∏–±–Ω–∏–π —Å—É–ø
...

–û—Å—å –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ –Ω–∞—à–∏—Ö –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤:

–î–µ–Ω—å 1:
–ö–ª—ñ—î–Ω—Ç –í—ñ—Ç—è 2,
–ö–ª—ñ—î–Ω—Ç –ö–æ–ª—è 3,
–ö–ª—ñ—î–Ω—Ç –ê–ª–µ–∫—Å 10

–î–µ–Ω—å 2:
–ö–ª—ñ—î–Ω—Ç –í—ñ—Ç—è 4,
–ö–ª—ñ—î–Ω—Ç –ö–æ–ª—è 7,
–ö–ª—ñ—î–Ω—Ç –ê–ª–µ–∫—Å 6

 */
import 'dart:core';
import 'dart:io';
import 'dart:math';

void main() {
  startGame();
}

const int userSoupsLimitPerDay = 2;
const int countDays = 5;
final List<String> usersList = [];
final Map<int, String> soupCounter = {};
Map<String, List<Map<int, String>>> userData = {};

const Map<int, String> soups = {
  1: '¬´–ë–æ—Ä—â¬ª',
  2: '¬´–°–æ–ª—è–Ω–∫–∞¬ª',
  3: '¬´–†–æ–∑—Å–æ–ª—å–Ω–∏–∫¬ª',
  4: '¬´–ì—Ä–∏–±–Ω–∏–π —Å—É–ø¬ª',
  5: '¬´–¢–æ–º –Ø–º¬ª',
  6: '¬´–ö—É—Ä—è—á–∏–π –±—É–ª—å–π–æ–Ω¬ª',
  7: '¬´–°—É–ø-–ø—é—Ä–µ –∑ –≥–∞—Ä–±—É–∑–∞¬ª',
};

//Main UserFlow
void startGame() {
  var dayCounter = 1;
  var soupId = 0;
  String userName = '';
  String? _userInput = createNewUser();
  if (_userInput == null) {
    print('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥—ñ —ñ–º–µ–Ω—ñ, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É');
    _userInput = createNewUser();
  }
  userName = _userInput!;
  while (dayCounter <= countDays) {
    soupId = userInputHandler(soups);
    if (soupId > 0 && soupId <= soups.length) {
      //Fill user data
      userData[userName] ??= [];
      userData[userName]!.add({dayCounter: soups[soupId]!});
      dayCounter++;
      print(userData);
    } else {
      print('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥—ñ –º–µ–Ω—é');
    }
  }
  //Show popular soup
  String popularSoup = getMostCommonSoupPick(userName, showStatistics: true);
  print('–ù–∞–π –ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∞ —Å—Ç—Ä–∞–≤–∞ —Ü–µ $popularSoup');
}

//User
int userInputHandler(Map<int, String> menuData) {
  int userChoice = 0;

  print('–û–±–µ—Ä–∏ —Å—É–ø. –í–≤–µ–¥–∏ –π–æ–≥–æ –Ω–æ–º–µ—Ä –≤ –º–µ–Ω—é');
  soups.forEach((k, v) {
    print('$k - $v');
  });
  String? userInput = stdin.readLineSync();
  if (userInput != null && userInput.isNotEmpty) {
    try {
      userChoice = int.parse(userInput);
      if (userChoice >= 1 && userChoice <= soups.keys.length) {
        return userChoice;
      } else {
        userChoice = 0;
        print('–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–µ –≤ –º–µ–Ω—é');
      }
    } catch (e) {
      print('Convert Error $e');
      return 0;
    }
  }
  return userChoice;
}

String? createNewUser() {
  print('–í–µ–¥–∏—Ç—å —Å–≤–æ—î —ñ–º`—è');
  String? userName = stdin.readLineSync();
  if (userName != null && userName.isNotEmpty) {
    return userName;
  }
  return null;
}

String getMostCommonSoupPick(String dataKey, {bool showStatistics = false}) {
  Map<String, int> countSoups = {};
  String result = '';
  var soupMaps = userData[dataKey];
  if (soupMaps == null || soupMaps.isEmpty) {
    return '–ù–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö';
  }
  List<String> soupList = soupMaps.expand((item) => item.values).toList();

  for (String soup in soupList) {
    if (countSoups.containsKey(soup)) {
      countSoups[soup] = countSoups[soup]! + 1;
    } else {
      countSoups[soup] = 1;
    }
  }
  if (showStatistics) {
    print('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥.');
    countSoups.forEach((k, v) {
      print('$v –æ–±—Ä–∞–Ω–æ —Ä–∞–∑—ñ–≤ - $k');
    });
  }
  int maxScore = countSoups.values.reduce(max);
  int minScore = countSoups.values.reduce(min);
  if (maxScore > minScore) {
    result = countSoups.entries.firstWhere((entry) => entry.value == maxScore).key;
  } else {
    print('–£–ª—é–±–ª–µ–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏ –Ω–µ–º–∞—î');
    result = '(–Ω–µ –æ–±—Ä–∞–Ω–æ)';
  }
  return result;
}
